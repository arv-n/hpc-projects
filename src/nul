	.file	"SEQ_Poisson_flymake.c"
	.text
	.comm	gridsize,8,8
	.comm	precision_goal,8,8
	.comm	max_iter,4,4
	.comm	ticks,8,8
	.globl	timer_on
	.bss
	.align 4
	.type	timer_on, @object
	.size	timer_on, 4
timer_on:
	.zero	4
	.comm	phi,8,8
	.comm	source,8,8
	.comm	dim,8,8
	.text
	.globl	start_timer
	.type	start_timer, @function
start_timer:
.LFB5:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	timer_on(%rip), %eax
	testl	%eax, %eax
	jne	.L3
	call	clock@PLT
	movq	%rax, ticks(%rip)
	movl	$1, timer_on(%rip)
.L3:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE5:
	.size	start_timer, .-start_timer
	.globl	resume_timer
	.type	resume_timer, @function
resume_timer:
.LFB6:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	timer_on(%rip), %eax
	testl	%eax, %eax
	jne	.L6
	call	clock@PLT
	movq	%rax, %rdx
	movq	ticks(%rip), %rax
	subq	%rax, %rdx
	movq	%rdx, %rax
	movq	%rax, ticks(%rip)
	movl	$1, timer_on(%rip)
.L6:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	resume_timer, .-resume_timer
	.globl	stop_timer
	.type	stop_timer, @function
stop_timer:
.LFB7:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	timer_on(%rip), %eax
	testl	%eax, %eax
	je	.L9
	call	clock@PLT
	movq	%rax, %rdx
	movq	ticks(%rip), %rax
	subq	%rax, %rdx
	movq	%rdx, %rax
	movq	%rax, ticks(%rip)
	movl	$0, timer_on(%rip)
.L9:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	stop_timer, .-stop_timer
	.section	.rodata
	.align 8
.LC1:
	.string	"Elapsed processortime: %14.6f s\n"
	.text
	.globl	print_timer
	.type	print_timer, @function
print_timer:
.LFB8:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	timer_on(%rip), %eax
	testl	%eax, %eax
	je	.L11
	movl	$0, %eax
	call	stop_timer
	movq	ticks(%rip), %rax
	cvtsi2sdq	%rax, %xmm0
	movsd	.LC0(%rip), %xmm1
	mulsd	%xmm1, %xmm0
	leaq	.LC1(%rip), %rdi
	movl	$1, %eax
	call	printf@PLT
	movl	$0, %eax
	call	resume_timer
	jmp	.L13
.L11:
	movq	ticks(%rip), %rax
	cvtsi2sdq	%rax, %xmm0
	movsd	.LC0(%rip), %xmm1
	mulsd	%xmm1, %xmm0
	leaq	.LC1(%rip), %rdi
	movl	$1, %eax
	call	printf@PLT
.L13:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	print_timer, .-print_timer
	.globl	Debug
	.type	Debug, @function
Debug:
.LFB9:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.L15
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	puts@PLT
.L15:
	cmpl	$0, -12(%rbp)
	je	.L17
	movl	$1, %edi
	call	exit@PLT
.L17:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	Debug, .-Debug
	.section	.rodata
.LC2:
	.string	"Setup_Subgrid"
.LC3:
	.string	"r"
.LC4:
	.string	"./dat/input.dat"
.LC5:
	.string	"Error opening input.dat"
.LC6:
	.string	"nx: %i\n"
.LC7:
	.string	"ny: %i\n"
.LC8:
	.string	"precision goal: %lf\n"
.LC9:
	.string	"max iterations: %i\n"
	.align 8
.LC10:
	.string	"Setup_Subgrid : malloc(phi) failed"
	.align 8
.LC11:
	.string	"Setup_Subgrid : malloc(source) failed"
	.align 8
.LC12:
	.string	"Setup_Subgrid : malloc(*phi) failed"
	.align 8
.LC13:
	.string	"Setup_Subgrid : malloc(*source) failed"
.LC15:
	.string	"source: %lf %lf %lf\n"
	.text
	.globl	Setup_Grid
	.type	Setup_Grid, @function
Setup_Grid:
.LFB10:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset 3, -24
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movl	$0, %esi
	leaq	.LC2(%rip), %rdi
	call	Debug
	leaq	.LC3(%rip), %rsi
	leaq	.LC4(%rip), %rdi
	call	fopen@PLT
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L19
	movl	$1, %esi
	leaq	.LC5(%rip), %rdi
	call	Debug
.L19:
	movq	-32(%rbp), %rax
	leaq	gridsize(%rip), %rdx
	leaq	.LC6(%rip), %rsi
	movq	%rax, %rdi
	movl	$0, %eax
	call	__isoc99_fscanf@PLT
	movq	-32(%rbp), %rax
	leaq	4+gridsize(%rip), %rdx
	leaq	.LC7(%rip), %rsi
	movq	%rax, %rdi
	movl	$0, %eax
	call	__isoc99_fscanf@PLT
	movq	-32(%rbp), %rax
	leaq	precision_goal(%rip), %rdx
	leaq	.LC8(%rip), %rsi
	movq	%rax, %rdi
	movl	$0, %eax
	call	__isoc99_fscanf@PLT
	movq	-32(%rbp), %rax
	leaq	max_iter(%rip), %rdx
	leaq	.LC9(%rip), %rsi
	movq	%rax, %rdi
	movl	$0, %eax
	call	__isoc99_fscanf@PLT
	movl	gridsize(%rip), %eax
	addl	$2, %eax
	movl	%eax, dim(%rip)
	movl	4+gridsize(%rip), %eax
	addl	$2, %eax
	movl	%eax, 4+dim(%rip)
	movl	dim(%rip), %eax
	cltq
	salq	$3, %rax
	movq	%rax, %rdi
	call	malloc@PLT
	movq	%rax, phi(%rip)
	movq	phi(%rip), %rax
	testq	%rax, %rax
	jne	.L20
	movl	$1, %esi
	leaq	.LC10(%rip), %rdi
	call	Debug
.L20:
	movl	dim(%rip), %eax
	cltq
	salq	$3, %rax
	movq	%rax, %rdi
	call	malloc@PLT
	movq	%rax, source(%rip)
	movq	source(%rip), %rax
	testq	%rax, %rax
	jne	.L21
	movl	$1, %esi
	leaq	.LC11(%rip), %rdi
	call	Debug
.L21:
	movl	4+dim(%rip), %edx
	movl	dim(%rip), %eax
	imull	%edx, %eax
	cltq
	salq	$3, %rax
	movq	phi(%rip), %rbx
	movq	%rax, %rdi
	call	malloc@PLT
	movq	%rax, (%rbx)
	movq	(%rbx), %rax
	testq	%rax, %rax
	jne	.L22
	movl	$1, %esi
	leaq	.LC12(%rip), %rdi
	call	Debug
.L22:
	movl	4+dim(%rip), %edx
	movl	dim(%rip), %eax
	imull	%edx, %eax
	cltq
	salq	$2, %rax
	movq	source(%rip), %rbx
	movq	%rax, %rdi
	call	malloc@PLT
	movq	%rax, (%rbx)
	movq	(%rbx), %rax
	testq	%rax, %rax
	jne	.L23
	movl	$1, %esi
	leaq	.LC13(%rip), %rdi
	call	Debug
.L23:
	movl	$1, -68(%rbp)
	jmp	.L24
.L25:
	movq	phi(%rip), %rax
	movq	(%rax), %rdx
	movl	4+dim(%rip), %eax
	imull	-68(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rsi
	movq	phi(%rip), %rax
	movl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	salq	$3, %rcx
	addq	%rcx, %rax
	addq	%rsi, %rdx
	movq	%rdx, (%rax)
	movq	source(%rip), %rax
	movq	(%rax), %rdx
	movl	4+dim(%rip), %eax
	imull	-68(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rsi
	movq	source(%rip), %rax
	movl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	salq	$3, %rcx
	addq	%rcx, %rax
	addq	%rsi, %rdx
	movq	%rdx, (%rax)
	addl	$1, -68(%rbp)
.L24:
	movl	dim(%rip), %eax
	cmpl	%eax, -68(%rbp)
	jl	.L25
	movl	$0, -68(%rbp)
	jmp	.L26
.L29:
	movl	$0, -64(%rbp)
	jmp	.L27
.L28:
	movq	phi(%rip), %rax
	movl	-68(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-64(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	pxor	%xmm0, %xmm0
	movsd	%xmm0, (%rax)
	movq	source(%rip), %rax
	movl	-68(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-64(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	$0, (%rax)
	addl	$1, -64(%rbp)
.L27:
	movl	4+dim(%rip), %eax
	cmpl	%eax, -64(%rbp)
	jl	.L28
	addl	$1, -68(%rbp)
.L26:
	movl	dim(%rip), %eax
	cmpl	%eax, -68(%rbp)
	jl	.L29
.L31:
	leaq	-40(%rbp), %rsi
	leaq	-48(%rbp), %rcx
	leaq	-56(%rbp), %rdx
	movq	-32(%rbp), %rax
	movq	%rsi, %r8
	leaq	.LC15(%rip), %rsi
	movq	%rax, %rdi
	movl	$0, %eax
	call	__isoc99_fscanf@PLT
	movl	%eax, -60(%rbp)
	cmpl	$3, -60(%rbp)
	jne	.L30
	movl	gridsize(%rip), %eax
	cvtsi2sd	%eax, %xmm0
	movsd	-56(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -68(%rbp)
	movl	4+gridsize(%rip), %eax
	cvtsi2sd	%eax, %xmm0
	movsd	-48(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -64(%rbp)
	addl	$1, -68(%rbp)
	addl	$1, -64(%rbp)
	movq	phi(%rip), %rax
	movl	-68(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-64(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movsd	-40(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movq	source(%rip), %rax
	movl	-68(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-64(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	$1, (%rax)
.L30:
	cmpl	$3, -60(%rbp)
	je	.L31
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	fclose@PLT
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L32
	call	__stack_chk_fail@PLT
.L32:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	Setup_Grid, .-Setup_Grid
	.globl	Do_Step
	.type	Do_Step, @function
Do_Step:
.LFB11:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -36(%rbp)
	pxor	%xmm0, %xmm0
	movsd	%xmm0, -16(%rbp)
	movl	$1, -24(%rbp)
	jmp	.L34
.L39:
	movl	$1, -20(%rbp)
	jmp	.L35
.L38:
	movl	-24(%rbp), %edx
	movl	-20(%rbp), %eax
	addl	%eax, %edx
	movl	%edx, %eax
	sarl	$31, %eax
	shrl	$31, %eax
	addl	%eax, %edx
	andl	$1, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	cmpl	%eax, -36(%rbp)
	jne	.L36
	movq	source(%rip), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	$1, %eax
	je	.L36
	movq	phi(%rip), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movsd	(%rax), %xmm0
	movsd	%xmm0, -8(%rbp)
	movq	phi(%rip), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	addq	$1, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movsd	(%rax), %xmm1
	movq	phi(%rip), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	subq	$8, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movsd	(%rax), %xmm0
	addsd	%xmm1, %xmm0
	movq	phi(%rip), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	addq	$1, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movsd	(%rax), %xmm1
	addsd	%xmm1, %xmm0
	movq	phi(%rip), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	subq	$8, %rdx
	addq	%rdx, %rax
	movsd	(%rax), %xmm1
	addsd	%xmm1, %xmm0
	movq	phi(%rip), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movsd	.LC16(%rip), %xmm1
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax)
	movq	phi(%rip), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movsd	(%rax), %xmm1
	movsd	-8(%rbp), %xmm0
	subsd	%xmm1, %xmm0
	movq	.LC17(%rip), %xmm1
	andpd	%xmm1, %xmm0
	ucomisd	-16(%rbp), %xmm0
	jbe	.L36
	movq	phi(%rip), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movsd	(%rax), %xmm1
	movsd	-8(%rbp), %xmm0
	subsd	%xmm1, %xmm0
	movq	.LC17(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	%xmm0, -16(%rbp)
.L36:
	addl	$1, -20(%rbp)
.L35:
	movl	4+dim(%rip), %eax
	subl	$1, %eax
	cmpl	%eax, -20(%rbp)
	jl	.L38
	addl	$1, -24(%rbp)
.L34:
	movl	dim(%rip), %eax
	subl	$1, %eax
	cmpl	%eax, -24(%rbp)
	jl	.L39
	movsd	-16(%rbp), %xmm0
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	Do_Step, .-Do_Step
	.section	.rodata
.LC18:
	.string	"Solve"
.LC19:
	.string	"Do_Step 0"
.LC20:
	.string	"Do_Step 1"
.LC21:
	.string	"Number of iterations : %i\n"
	.text
	.globl	Solve
	.type	Solve, @function
Solve:
.LFB12:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movl	$0, -28(%rbp)
	movl	$0, %esi
	leaq	.LC18(%rip), %rdi
	call	Debug
	movsd	precision_goal(%rip), %xmm0
	addsd	%xmm0, %xmm0
	movsd	%xmm0, -24(%rbp)
	jmp	.L43
.L49:
	movl	$0, %esi
	leaq	.LC19(%rip), %rdi
	call	Debug
	movl	$0, %edi
	call	Do_Step
	movq	%xmm0, %rax
	movq	%rax, -16(%rbp)
	movl	$0, %esi
	leaq	.LC20(%rip), %rdi
	call	Debug
	movl	$1, %edi
	call	Do_Step
	movq	%xmm0, %rax
	movq	%rax, -8(%rbp)
	movsd	-16(%rbp), %xmm0
	ucomisd	-8(%rbp), %xmm0
	jbe	.L52
	movsd	-16(%rbp), %xmm0
	jmp	.L46
.L52:
	movsd	-8(%rbp), %xmm0
.L46:
	movsd	%xmm0, -24(%rbp)
	addl	$1, -28(%rbp)
.L43:
	movsd	precision_goal(%rip), %xmm1
	movsd	-24(%rbp), %xmm0
	ucomisd	%xmm1, %xmm0
	jbe	.L47
	movl	max_iter(%rip), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L49
.L47:
	movl	-28(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC21(%rip), %rdi
	movl	$0, %eax
	call	printf@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE12:
	.size	Solve, .-Solve
	.section	.rodata
.LC22:
	.string	"w"
.LC23:
	.string	"output.dat"
.LC24:
	.string	"Write_Grid : fopen failed"
.LC25:
	.string	"Write_Grid"
.LC26:
	.string	"%i %i %f\n"
	.text
	.globl	Write_Grid
	.type	Write_Grid, @function
Write_Grid:
.LFB13:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	leaq	.LC22(%rip), %rsi
	leaq	.LC23(%rip), %rdi
	call	fopen@PLT
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L54
	movl	$1, %esi
	leaq	.LC24(%rip), %rdi
	call	Debug
.L54:
	movl	$0, %esi
	leaq	.LC25(%rip), %rdi
	call	Debug
	movl	$1, -16(%rbp)
	jmp	.L55
.L58:
	movl	$1, -12(%rbp)
	jmp	.L56
.L57:
	movq	phi(%rip), %rax
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rsi
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %edx
	movq	-8(%rbp), %rax
	movq	%rsi, -24(%rbp)
	movsd	-24(%rbp), %xmm0
	leaq	.LC26(%rip), %rsi
	movq	%rax, %rdi
	movl	$1, %eax
	call	fprintf@PLT
	addl	$1, -12(%rbp)
.L56:
	movl	4+dim(%rip), %eax
	subl	$1, %eax
	cmpl	%eax, -12(%rbp)
	jl	.L57
	addl	$1, -16(%rbp)
.L55:
	movl	dim(%rip), %eax
	subl	$1, %eax
	cmpl	%eax, -16(%rbp)
	jl	.L58
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fclose@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE13:
	.size	Write_Grid, .-Write_Grid
	.section	.rodata
.LC27:
	.string	"Clean_Up"
	.text
	.globl	Clean_Up
	.type	Clean_Up, @function
Clean_Up:
.LFB14:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	$0, %esi
	leaq	.LC27(%rip), %rdi
	call	Debug
	movq	phi(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	free@PLT
	movq	phi(%rip), %rax
	movq	%rax, %rdi
	call	free@PLT
	movq	source(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	free@PLT
	movq	source(%rip), %rax
	movq	%rax, %rdi
	call	free@PLT
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE14:
	.size	Clean_Up, .-Clean_Up
	.globl	main
	.type	main, @function
main:
.LFB15:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, %eax
	call	start_timer
	movl	$0, %eax
	call	Setup_Grid
	movl	$0, %eax
	call	Solve
	movl	$0, %eax
	call	Write_Grid
	movl	$0, %eax
	call	print_timer
	movl	$0, %eax
	call	Clean_Up
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE15:
	.size	main, .-main
	.section	.rodata
	.align 8
.LC0:
	.long	2696277389
	.long	1051772663
	.align 8
.LC16:
	.long	0
	.long	1070596096
	.align 16
.LC17:
	.long	4294967295
	.long	2147483647
	.long	0
	.long	0
	.ident	"GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0"
	.section	.note.GNU-stack,"",@progbits
